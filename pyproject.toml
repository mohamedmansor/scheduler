# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]

# ==== Coverage ====
[tool.coverage.run]
include = ["webtask_scheduler/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"

# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2


[tool.ruff]
ignore = [
  "RUF012",
  "RUF001",
  "S106",
  "S105",
  "F403",
  "N806",
  "DJ001",  # Avoid using `null=True` on string-based fields such as TextField
  "DJ007",  # using __all__ in models
  "BLE001",
  "S113",
  "N805",
  "N815",
  "N802",
  "TRY401",
  "N818",
  "S101",
  "N811",
  "N812",
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "EXE002", # The file is executable but no shebang is present
  "SIM102", # sometimes it's better to nest
  "UP038" # Checks for uses of isinstance/issubclass that take a tuple 
          # of types for comparison.
          # Deactivated because it can make the code slow: 
          # https://github.com/astral-sh/ruff/issues/7871
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*"
]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "UP",   # pyupgrade
  "I",    # isort
  "N",    # pep8-naming
  "S",    # falke8-bandit
  "BLE",  # flake8-blind-except
  "C4",   # flake8-comprehensions
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "DJ01", # flake8-django,
  "RUF",  # ruff
  "Q",    # flake8-quotes
  "SIM",  # flake8-simplify
  "C90",  # mccabe
  "DJ",   # flake8-django
  "TID",  # flake8-tidy-imports
  "INT",  # flake8-gettext
]

# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
indent-width = 4
line-length = 120
target-version = "py312"
ignore-init-module-imports = true

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require 
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.isort.sections]
"django" = ["django"]

[tool.ruff.isort]
known-first-party = ["scheduler"]
section-order = [
  "future",
  "standard-library",
  "django",
  "third-party",
  "first-party",
  "localfolder",
]
[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"
[tool.poetry]
name = "webtask-scheduler"
version = "0.1.0"
description = ""
authors = ["Mohamed Mansor <mohamedmansor212@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
python-slugify = "8.0.4"
pillow = "10.3.0"
argon2-cffi = "23.1.0"
whitenoise = "6.6.0"
redis = "5.0.4"
hiredis = "2.3.2"
celery = "5.3.4"
django-celery-beat = "2.6.0"
flower = "2.0.1"
django = "4.2.13"
django-environ = "0.11.2"
django-model-utils = "4.5.1"
django-allauth = {version = "0.63.1", extras = ["mfa"]}
django-crispy-forms = "2.1"
crispy-bootstrap5 = "2024.2"
django-redis = "5.4.0"
djangorestframework = "3.15.1"
django-cors-headers = "4.3.1"
drf-spectacular = "0.27.2"


[tool.poetry.group.dev.dependencies]
werkzeug = {version = "3.0.3", extras = ["watchdog"]}
ipdb = "0.13.13"
psycopg = {version = "3.1.19", extras = ["c"]}
watchfiles = "0.21.0"
mypy = "1.10.0"
django-stubs = {version = "5.0.0", extras = ["compatible-mypy"]}
pytest = "8.2.1"
pytest-sugar = "1.0.0"
djangorestframework-stubs = {version = "3.15.0", extras = ["compatible-mypy"]}
time-machine = "2.14.1"
sphinx = "7.3.7"
sphinx-autobuild = "2024.4.16"
ruff = "0.5.0"
coverage = "7.5.1"
djlint = "1.34.1"
pre-commit = "3.7.1"
factory-boy = "3.3.0"
django-debug-toolbar = "4.3.0"
django-extensions = "3.2.3"
django-coverage-plugin = "3.1.0"
pytest-django = "4.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
